// <auto-generated />
using System;
using GameDAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GameDAL.Migrations
{
    [DbContext(typeof(GameDbContext))]
    [Migration("20231207172345_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GameEL.Card", b =>
                {
                    b.Property<int>("CardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CardId"));

                    b.Property<int?>("DeckId")
                        .HasColumnType("int");

                    b.Property<int?>("HandId")
                        .HasColumnType("int");

                    b.Property<int>("Suite")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("CardId");

                    b.HasIndex("DeckId");

                    b.HasIndex("HandId");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("GameEL.Deck", b =>
                {
                    b.Property<int>("DeckId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeckId"));

                    b.Property<int>("NumberOfDecks")
                        .HasColumnType("int");

                    b.HasKey("DeckId");

                    b.ToTable("Decks");
                });

            modelBuilder.Entity("GameEL.Hand", b =>
                {
                    b.Property<int>("HandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HandId"));

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.HasKey("HandId");

                    b.HasIndex("PlayerId")
                        .IsUnique();

                    b.ToTable("Hands");
                });

            modelBuilder.Entity("GameEL.Player", b =>
                {
                    b.Property<int>("PlayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlayerId"));

                    b.Property<bool>("IsDealer")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalWins")
                        .HasColumnType("int");

                    b.HasKey("PlayerId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("GameEL.Card", b =>
                {
                    b.HasOne("GameEL.Deck", "Deck")
                        .WithMany("Cards")
                        .HasForeignKey("DeckId");

                    b.HasOne("GameEL.Hand", "Hand")
                        .WithMany("Cards")
                        .HasForeignKey("HandId");

                    b.Navigation("Deck");

                    b.Navigation("Hand");
                });

            modelBuilder.Entity("GameEL.Hand", b =>
                {
                    b.HasOne("GameEL.Player", "Player")
                        .WithOne("Hand")
                        .HasForeignKey("GameEL.Hand", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("GameEL.Deck", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("GameEL.Hand", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("GameEL.Player", b =>
                {
                    b.Navigation("Hand")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
